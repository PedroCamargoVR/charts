// Mocks generated by Mockito 5.4.2 from annotations
// in charts_common/test/chart/bar/bar_label_decorator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:math' as _i4;

import 'package:charts_common/src/chart/common/canvas_shapes.dart' as _i6;
import 'package:charts_common/src/chart/common/chart_canvas.dart' as _i3;
import 'package:charts_common/src/common/color.dart' as _i5;
import 'package:charts_common/src/common/graphics_factory.dart' as _i2;
import 'package:charts_common/src/common/text_element.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGraphicsFactory_0 extends _i1.SmartFake
    implements _i2.GraphicsFactory {
  _FakeGraphicsFactory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChartCanvas].
///
/// See the documentation for Mockito's code generation for more information.
class MockChartCanvas extends _i1.Mock implements _i3.ChartCanvas {
  MockChartCanvas() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GraphicsFactory get graphicsFactory => (super.noSuchMethod(
        Invocation.getter(#graphicsFactory),
        returnValue: _FakeGraphicsFactory_0(
          this,
          Invocation.getter(#graphicsFactory),
        ),
      ) as _i2.GraphicsFactory);

  @override
  set drawingView(String? viewName) => super.noSuchMethod(
        Invocation.setter(
          #drawingView,
          viewName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawCircleSector(
    _i4.Point<num>? center,
    double? radius,
    double? innerRadius,
    double? startAngle,
    double? endAngle, {
    _i5.Color? fill,
    _i5.Color? stroke,
    double? strokeWidthPx,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawCircleSector,
          [
            center,
            radius,
            innerRadius,
            startAngle,
            endAngle,
          ],
          {
            #fill: fill,
            #stroke: stroke,
            #strokeWidthPx: strokeWidthPx,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawLink(
    _i3.Link? link,
    _i3.LinkOrientation? orientation,
    _i5.Color? fill,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #drawLink,
          [
            link,
            orientation,
            fill,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawLine({
    required List<_i4.Point<num>>? points,
    _i4.Rectangle<num>? clipBounds,
    _i5.Color? fill,
    _i5.Color? stroke,
    bool? roundEndCaps,
    double? strokeWidthPx,
    List<int>? dashPattern,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawLine,
          [],
          {
            #points: points,
            #clipBounds: clipBounds,
            #fill: fill,
            #stroke: stroke,
            #roundEndCaps: roundEndCaps,
            #strokeWidthPx: strokeWidthPx,
            #dashPattern: dashPattern,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPie(_i6.CanvasPie? canvasPie) => super.noSuchMethod(
        Invocation.method(
          #drawPie,
          [canvasPie],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPoint({
    required _i4.Point<num>? point,
    required double? radius,
    _i5.Color? fill,
    _i5.Color? stroke,
    double? strokeWidthPx,
    _i3.BlendMode? blendMode,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawPoint,
          [],
          {
            #point: point,
            #radius: radius,
            #fill: fill,
            #stroke: stroke,
            #strokeWidthPx: strokeWidthPx,
            #blendMode: blendMode,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawPolygon({
    required List<_i4.Point<num>>? points,
    _i4.Rectangle<num>? clipBounds,
    _i5.Color? fill,
    _i5.Color? stroke,
    double? strokeWidthPx,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawPolygon,
          [],
          {
            #points: points,
            #clipBounds: clipBounds,
            #fill: fill,
            #stroke: stroke,
            #strokeWidthPx: strokeWidthPx,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRect(
    _i4.Rectangle<num>? bounds, {
    _i5.Color? fill,
    _i5.Color? stroke,
    double? strokeWidthPx,
    _i4.Rectangle<num>? drawAreaBounds,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRect,
          [bounds],
          {
            #fill: fill,
            #stroke: stroke,
            #strokeWidthPx: strokeWidthPx,
            #drawAreaBounds: drawAreaBounds,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawRRect(
    _i4.Rectangle<num>? bounds, {
    _i5.Color? fill,
    _i5.Color? stroke,
    _i5.Color? patternColor,
    _i3.FillPatternType? fillPattern,
    double? patternStrokeWidthPx,
    double? strokeWidthPx,
    num? radius,
    bool? roundTopLeft = false,
    bool? roundTopRight = false,
    bool? roundBottomLeft = false,
    bool? roundBottomRight = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawRRect,
          [bounds],
          {
            #fill: fill,
            #stroke: stroke,
            #patternColor: patternColor,
            #fillPattern: fillPattern,
            #patternStrokeWidthPx: patternStrokeWidthPx,
            #strokeWidthPx: strokeWidthPx,
            #radius: radius,
            #roundTopLeft: roundTopLeft,
            #roundTopRight: roundTopRight,
            #roundBottomLeft: roundBottomLeft,
            #roundBottomRight: roundBottomRight,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawBarStack(
    _i6.CanvasBarStack? canvasBarStack, {
    _i4.Rectangle<num>? drawAreaBounds,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawBarStack,
          [canvasBarStack],
          {#drawAreaBounds: drawAreaBounds},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void drawText(
    _i7.TextElement? textElement,
    int? offsetX,
    int? offsetY, {
    double? rotation = 0.0,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #drawText,
          [
            textElement,
            offsetX,
            offsetY,
          ],
          {#rotation: rotation},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setClipBounds(_i4.Rectangle<int>? clipBounds) => super.noSuchMethod(
        Invocation.method(
          #setClipBounds,
          [clipBounds],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetClipBounds() => super.noSuchMethod(
        Invocation.method(
          #resetClipBounds,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
